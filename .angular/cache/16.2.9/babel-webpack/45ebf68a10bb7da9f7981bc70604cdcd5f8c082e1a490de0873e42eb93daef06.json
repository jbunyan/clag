{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class ConnectionService {\n  constructor() {\n    this.names = ['John', 'Eric', 'Nancy', 'Allen', 'Gavin'];\n    this.title = 'default';\n    this.myPlayerId = -1;\n    this.myConnectionId = -1;\n    this.myHand = [];\n    this.myName = \"XXX\";\n    this.predictions = [];\n    this.trick = 0;\n    this.scoreboard = [];\n    this.ws = new WebSocket(\"ws://localhost:8080\");\n    this.ws.onopen = function () {\n      // Web Socket is connected, send data using send()\n      console.log(\"Connection successful\");\n    };\n    this.ws.onmessage = evt => {\n      let received_msg = JSON.parse(evt.data);\n      console.log(\"Message is received... \" + JSON.stringify(received_msg));\n      switch (received_msg.messageType) {\n        case \"connection\":\n          {\n            this.myConnectionId = received_msg.connectionId;\n            break;\n          }\n        case \"newPlayer\":\n          {\n            if (this.myConnectionId === received_msg.connectionId) {\n              this.myPlayerId = received_msg.playerId;\n            }\n            console.log(`New player: ${received_msg.data.name}`);\n            break;\n          }\n        case \"predictionRequest\":\n          {\n            this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"playerId\": ${this.myPlayerId}, \"messageType\":\"prediction\",\"data\":{\"prediction\":1}}`);\n            break;\n          }\n        case \"hand\":\n          {\n            this.myHand = received_msg.data.hand;\n            this.trick = 0;\n            break;\n          }\n        case \"predictions\":\n          {\n            this.predictions = received_msg.data.predictions;\n            break;\n          }\n        case \"playCard\":\n          {\n            this.sendCard();\n            break;\n          }\n        case \"scoreboard\":\n          {\n            this.scoreboard = received_msg.data;\n            break;\n          }\n        default:\n          {\n            console.log(\"unrecognised message type received\");\n          }\n      }\n    };\n    this.ws.onclose = function () {\n      // websocket is closed.\n      alert(\"Connection is closed...\");\n    };\n  }\n  selected() {\n    this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"messageType\":\"register\",\"data\":{\"name\":\"${this.myName}\"}}`);\n  }\n  sendCard() {\n    let m = {\n      \"connectionId\": this.myConnectionId,\n      \"playerId\": this.myPlayerId,\n      \"messageType\": \"card\",\n      \"data\": {\n        \"card\": this.myHand[this.trick]\n      }\n    };\n    this.trick++;\n    this.ws.send(JSON.stringify(m));\n  }\n  newGame() {\n    console.log(\"New game\");\n    this.ws.send(JSON.stringify({\n      connectionId: this.myConnectionId,\n      playerId: this.myPlayerId,\n      messageType: \"newGame\"\n    }));\n  }\n  static #_ = this.ɵfac = function ConnectionService_Factory(t) {\n    return new (t || ConnectionService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionService,\n    factory: ConnectionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["ConnectionService","constructor","names","title","myPlayerId","myConnectionId","myHand","myName","predictions","trick","scoreboard","ws","WebSocket","onopen","console","log","onmessage","evt","received_msg","JSON","parse","data","stringify","messageType","connectionId","playerId","name","send","hand","sendCard","onclose","alert","selected","m","newGame","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/connection.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({ providedIn: 'root' })\nexport class ConnectionService {\n\n  names: string[] = ['John','Eric','Nancy','Allen','Gavin']\n  title = 'default';\n  myPlayerId: number = -1\n  myConnectionId: number = -1\n  myHand: number[] = []\n  myName: string = \"XXX\"\n  predictions: number[] = []\n  ws: WebSocket\n  trick: number = 0\n  scoreboard: any[][] = []\n\n  constructor() {\n\n    this.ws = new WebSocket(\"ws://localhost:8080\");\n\t\t\t\t\n      this.ws.onopen = function() {\n        \n        // Web Socket is connected, send data using send()\n        console.log(\"Connection successful\")\n      };\n\n      this.ws.onmessage = (evt) => { \n        let received_msg = JSON.parse(evt.data);\n        console.log(\"Message is received... \" + JSON.stringify(received_msg));\n\n        switch(received_msg.messageType) {\n          case \"connection\": {\n            this.myConnectionId = received_msg.connectionId\n            break\n          }\n          case \"newPlayer\": {\n            if ( this.myConnectionId === received_msg.connectionId) {\n              this.myPlayerId = received_msg.playerId\n            }\n            console.log(`New player: ${received_msg.data.name}`)\n            break\n          }\n          case \"predictionRequest\": {\n            this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"playerId\": ${this.myPlayerId}, \"messageType\":\"prediction\",\"data\":{\"prediction\":1}}`)\n            break\n          }\n          case \"hand\": {\n            this.myHand = received_msg.data.hand\n            this.trick = 0\n            break\n          }\n          case \"predictions\": {\n            this.predictions = received_msg.data.predictions\n            break\n          }\n          case \"playCard\": {\n            this.sendCard()\n            break\n          }\n          case \"scoreboard\": {\n            this.scoreboard = received_msg.data\n            break\n          }\n          default: {\n            console.log(\"unrecognised message type received\")\n          }\n        }\n        \n      };\n\n      this.ws.onclose = function() { \n        \n        // websocket is closed.\n        alert(\"Connection is closed...\"); \n      };\n  }\n\n  selected() {\n    this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"messageType\":\"register\",\"data\":{\"name\":\"${this.myName}\"}}`);\n  }\n\n  sendCard() {\n\n    let m = {\n      \"connectionId\": this.myConnectionId,\n      \"playerId\": this.myPlayerId,\n      \"messageType\":\"card\",\n      \"data\":{\"card\":this.myHand[this.trick]}\n    }\n    this.trick++\n    this.ws.send(JSON.stringify(m))\n  }\n\n  newGame() {\n    console.log(\"New game\")\n    this.ws.send(JSON.stringify({\n      connectionId: this.myConnectionId,\n      playerId: this.myPlayerId,\n      messageType: \"newGame\"\n    }))\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}