{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../connection.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction DashboardComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Up\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Down\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", name_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(name_r6);\n  }\n}\nfunction DashboardComponent_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(card_r7);\n  }\n}\nfunction DashboardComponent_select_9_option_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 6);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r9 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", name_r9);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(name_r9);\n  }\n}\nfunction DashboardComponent_select_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"select\", 1);\n    i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_select_9_Template_select_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.myPrediction = $event);\n    })(\"change\", function DashboardComponent_select_9_Template_select_change_0_listener() {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.predictionSelected());\n    });\n    i0.ɵɵtemplate(1, DashboardComponent_select_9_option_1_Template, 2, 2, \"option\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r4.myPrediction);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r4.names);\n  }\n}\nfunction DashboardComponent_p_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const prediction_r13 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(prediction_r13);\n  }\n}\nexport class DashboardComponent {\n  constructor(connection) {\n    this.connection = connection;\n    this.names = ['John', 'Eric', 'Nancy', 'Allen', 'Gavin'];\n    this.myHand = [];\n    this.myName = \"XXX\";\n    this.predictions = [];\n    this.trick = 0;\n    this.scoreboard = [];\n    this.predictionRequested = false;\n    this.predictionRange = [];\n    this.myPrediction = -1;\n    console.log(\"dashboard constructor\");\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: message => {\n        switch (message.messageType) {\n          case \"hand\":\n            {\n              this.myHand = message.data.hand;\n              break;\n            }\n          case \"predictionRequest\":\n            {\n              for (let i = 1; i <= this.myHand.length; i++) {\n                this.predictionRange.push(i);\n              }\n              this.predictionRequested = true;\n              break;\n            }\n          case \"predictions\":\n            {\n              this.predictions = message.data.predictions;\n              break;\n            }\n          default:\n            {\n              console.log(\"dashboard: ignoring message\");\n            }\n        }\n      }\n    });\n  }\n  playerSelected() {\n    this.connection.send(\"register\", {\n      \"name\": this.myName\n    });\n  }\n  predictionSelected() {\n    this.connection.send(\"prediction\", {\n      \"prediction\": this.myPrediction\n    });\n  }\n  newGame() {\n    console.log(\"New game\");\n    this.connection.send(\"newGame\");\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ConnectionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 17,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"ngModel\", \"ngModelChange\", \"change\", 4, \"ngIf\"], [3, \"click\"], [3, \"ngValue\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, DashboardComponent_p_2_Template, 2, 0, \"p\", 0);\n        i0.ɵɵtemplate(3, DashboardComponent_p_3_Template, 2, 0, \"p\", 0);\n        i0.ɵɵelementStart(4, \"select\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_4_listener($event) {\n          return ctx.myName = $event;\n        })(\"change\", function DashboardComponent_Template_select_change_4_listener() {\n          return ctx.playerSelected();\n        });\n        i0.ɵɵtemplate(5, DashboardComponent_option_5_Template, 2, 2, \"option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7, \"My hand: \");\n        i0.ɵɵtemplate(8, DashboardComponent_p_8_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(9, DashboardComponent_select_9_Template, 2, 2, \"select\", 4);\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵtext(11, \"Predictions: \");\n        i0.ɵɵtemplate(12, DashboardComponent_p_12_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14, \"Scores:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"button\", 5);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_15_listener() {\n          return ctx.newGame();\n        });\n        i0.ɵɵtext(16, \"New Game\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.myName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.names);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.myHand);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.predictionRequested);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.predictions);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","name_r6","ɵɵadvance","ɵɵtextInterpolate","card_r7","name_r9","ɵɵlistener","DashboardComponent_select_9_Template_select_ngModelChange_0_listener","$event","ɵɵrestoreView","_r11","ctx_r10","ɵɵnextContext","ɵɵresetView","myPrediction","DashboardComponent_select_9_Template_select_change_0_listener","ctx_r12","predictionSelected","ɵɵtemplate","DashboardComponent_select_9_option_1_Template","ctx_r4","names","prediction_r13","DashboardComponent","constructor","connection","myHand","myName","predictions","trick","scoreboard","predictionRequested","predictionRange","console","log","getMessageBehaviourSubject","subscribe","next","message","messageType","data","hand","i","length","push","playerSelected","send","newGame","_","ɵɵdirectiveInject","i1","ConnectionService","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","DashboardComponent_p_2_Template","DashboardComponent_p_3_Template","DashboardComponent_Template_select_ngModelChange_4_listener","DashboardComponent_Template_select_change_4_listener","DashboardComponent_option_5_Template","DashboardComponent_p_8_Template","DashboardComponent_select_9_Template","DashboardComponent_p_12_Template","DashboardComponent_Template_button_click_15_listener","isConnected"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.ts","/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ConnectionService, Message } from '../connection.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent {\n\n  names: string[] = ['John','Eric','Nancy','Allen','Gavin']\n  myHand: number[] = []\n  myName: string = \"XXX\"\n  predictions: number[] = []\n  trick: number = 0\n  scoreboard: any[][] = []\n  predictionRequested: boolean = false\n  predictionRange: number[] = []\n  myPrediction: number = -1\n\n  constructor(\n    public connection: ConnectionService\n  ) {\n    console.log(\"dashboard constructor\")\n\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: (message:Message) => {\n        switch(message.messageType) {\n          case \"hand\": {\n            this.myHand = message.data.hand\n            break\n          }\n          case \"predictionRequest\": {\n            for (let i = 1; i <= this.myHand.length ; i++) {\n              this.predictionRange.push(i);\n           }\n            this.predictionRequested = true\n            break\n          }\n          case \"predictions\": {\n            this.predictions = message.data.predictions\n            break\n          }\n          default: {\n            console.log(\"dashboard: ignoring message\")\n          }\n        }\n      }\n    })\n  }\n\n  playerSelected() {\n    this.connection.send(\"register\",{\"name\":this.myName});\n  }\n\n  predictionSelected() {\n    this.connection.send(\"prediction\",{\"prediction\":this.myPrediction});\n  }\n\n  newGame() {\n    console.log(\"New game\")\n    this.connection.send(\"newGame\")\n  }\n}\n","<h1>Dashboard</h1>\n<p *ngIf=\"connection.isConnected()\">Connection: Up</p>\n<p *ngIf=\"!connection.isConnected()\">Connection: Down</p>\n<select [(ngModel)]=\"myName\" (change)=\"playerSelected()\">\n  <option *ngFor=\"let name of names\" [ngValue]=\"name\">{{name}}</option>\n</select>\n<div>My hand: <p *ngFor=\"let card of myHand\">{{card}}</p></div>\n<select *ngIf=\"predictionRequested\" [(ngModel)]=\"myPrediction\" (change)=\"predictionSelected()\">\n  <option *ngFor=\"let name of names\" [ngValue]=\"name\">{{name}}</option>\n</select>\n<div>Predictions: <p *ngFor=\"let prediction of predictions\">{{prediction}}</p></div>\n<div>Scores:</div>\n<button (click)=\"newGame()\">New Game</button>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}