{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet DashboardComponent = class DashboardComponent {\n  constructor(connection) {\n    this.connection = connection;\n    this.names = ['John', 'Eric', 'Nancy', 'Allen', 'Gavin'];\n    this.myHand = [];\n    this.myName = \"XXX\";\n    this.predictions = [];\n    this.trick = 0;\n    this.scoreboard = [];\n    this.predictionRequested = false;\n    this.predictionRange = [];\n    this.myPrediction = -1;\n    this.playCardRequested = false;\n    this.myCardSelection = \"XX\";\n    console.log(\"dashboard constructor\");\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: message => {\n        switch (message.messageType) {\n          case \"hand\":\n            {\n              this.myHand = message.data.hand;\n              break;\n            }\n          case \"predictionRequest\":\n            {\n              this.predictionRange = [];\n              for (let i = 0; i <= this.myHand.length; i++) {\n                this.predictionRange.push(i);\n              }\n              this.predictionRequested = true;\n              break;\n            }\n          case \"predictions\":\n            {\n              this.predictions = message.data.predictions;\n              break;\n            }\n          case \"playCard\":\n            {\n              this.playCardRequested = true;\n              break;\n            }\n          case \"scoreboard\":\n            {\n              this.scoreboard = message.data.scoreboard;\n              break;\n            }\n          default:\n            {\n              console.log(\"dashboard: ignoring message\");\n            }\n        }\n      }\n    });\n  }\n  playerSelected() {\n    this.connection.send(\"register\", {\n      \"name\": this.myName\n    });\n  }\n  predictionSelected() {\n    this.connection.send(\"prediction\", {\n      \"prediction\": this.myPrediction\n    });\n    this.predictionRequested = false;\n  }\n  cardSelected() {\n    this.connection.send(\"card\", {\n      \"card\": this.myCardSelection\n    });\n    this.playCardRequested = false;\n  }\n  newGame() {\n    console.log(\"New game\");\n    this.connection.send(\"newGame\");\n  }\n};\nDashboardComponent = __decorate([Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})], DashboardComponent);\nexport { DashboardComponent };","map":{"version":3,"names":["Component","DashboardComponent","constructor","connection","names","myHand","myName","predictions","trick","scoreboard","predictionRequested","predictionRange","myPrediction","playCardRequested","myCardSelection","console","log","getMessageBehaviourSubject","subscribe","next","message","messageType","data","hand","i","length","push","playerSelected","send","predictionSelected","cardSelected","newGame","__decorate","selector","templateUrl","styleUrls"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/gameboard/gameboard.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ConnectionService, Message } from '../connection.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent {\n\n  names: string[] = ['John','Eric','Nancy','Allen','Gavin']\n  myHand: number[] = []\n  myName: string = \"XXX\"\n  predictions: number[] = []\n  trick: number = 0\n  scoreboard: any[][] = []\n  predictionRequested: boolean = false\n  predictionRange: number[] = []\n  myPrediction: number = -1\n  playCardRequested: boolean = false\n  myCardSelection: string = \"XX\"\n\n  constructor(\n    public connection: ConnectionService\n  ) {\n    console.log(\"dashboard constructor\")\n\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: (message:Message) => {\n        switch(message.messageType) {\n          case \"hand\": {\n            this.myHand = message.data.hand\n            break\n          }\n          case \"predictionRequest\": {\n            this.predictionRange = []\n            for (let i = 0; i <= this.myHand.length ; i++) {\n              this.predictionRange.push(i);\n           }\n            this.predictionRequested = true\n            break\n          }\n          case \"predictions\": {\n            this.predictions = message.data.predictions\n            break\n          }\n          case \"playCard\": {\n            this.playCardRequested = true\n            break\n          }\n          case \"scoreboard\": {\n            this.scoreboard = message.data.scoreboard\n            break\n          }\n          default: {\n            console.log(\"dashboard: ignoring message\")\n          }\n        }\n      }\n    })\n  }\n\n  playerSelected() {\n    this.connection.send(\"register\",{\"name\":this.myName});\n  }\n\n  predictionSelected() {\n    this.connection.send(\"prediction\",{\"prediction\":this.myPrediction});\n    this.predictionRequested = false\n  }\n\n  cardSelected() {\n    this.connection.send(\"card\",{\"card\":this.myCardSelection});\n    this.playCardRequested = false\n  }\n\n  newGame() {\n    console.log(\"New game\")\n    this.connection.send(\"newGame\")\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,IAAMC,kBAAkB,GAAxB,MAAMA,kBAAkB;EAc7BC,YACSC,UAA6B;IAA7B,KAAAA,UAAU,GAAVA,UAAU;IAbnB,KAAAC,KAAK,GAAa,CAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,CAAC;IACzD,KAAAC,MAAM,GAAa,EAAE;IACrB,KAAAC,MAAM,GAAW,KAAK;IACtB,KAAAC,WAAW,GAAa,EAAE;IAC1B,KAAAC,KAAK,GAAW,CAAC;IACjB,KAAAC,UAAU,GAAY,EAAE;IACxB,KAAAC,mBAAmB,GAAY,KAAK;IACpC,KAAAC,eAAe,GAAa,EAAE;IAC9B,KAAAC,YAAY,GAAW,CAAC,CAAC;IACzB,KAAAC,iBAAiB,GAAY,KAAK;IAClC,KAAAC,eAAe,GAAW,IAAI;IAK5BC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;IAEpC,IAAI,CAACb,UAAU,CAACc,0BAA0B,EAAE,CAACC,SAAS,CAAC;MACrDC,IAAI,EAAGC,OAAe,IAAI;QACxB,QAAOA,OAAO,CAACC,WAAW;UACxB,KAAK,MAAM;YAAE;cACX,IAAI,CAAChB,MAAM,GAAGe,OAAO,CAACE,IAAI,CAACC,IAAI;cAC/B;;UAEF,KAAK,mBAAmB;YAAE;cACxB,IAAI,CAACZ,eAAe,GAAG,EAAE;cACzB,KAAK,IAAIa,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,IAAI,CAACnB,MAAM,CAACoB,MAAM,EAAGD,CAAC,EAAE,EAAE;gBAC7C,IAAI,CAACb,eAAe,CAACe,IAAI,CAACF,CAAC,CAAC;;cAE9B,IAAI,CAACd,mBAAmB,GAAG,IAAI;cAC/B;;UAEF,KAAK,aAAa;YAAE;cAClB,IAAI,CAACH,WAAW,GAAGa,OAAO,CAACE,IAAI,CAACf,WAAW;cAC3C;;UAEF,KAAK,UAAU;YAAE;cACf,IAAI,CAACM,iBAAiB,GAAG,IAAI;cAC7B;;UAEF,KAAK,YAAY;YAAE;cACjB,IAAI,CAACJ,UAAU,GAAGW,OAAO,CAACE,IAAI,CAACb,UAAU;cACzC;;UAEF;YAAS;cACPM,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;;MAGhD;KACD,CAAC;EACJ;EAEAW,cAAcA,CAAA;IACZ,IAAI,CAACxB,UAAU,CAACyB,IAAI,CAAC,UAAU,EAAC;MAAC,MAAM,EAAC,IAAI,CAACtB;IAAM,CAAC,CAAC;EACvD;EAEAuB,kBAAkBA,CAAA;IAChB,IAAI,CAAC1B,UAAU,CAACyB,IAAI,CAAC,YAAY,EAAC;MAAC,YAAY,EAAC,IAAI,CAAChB;IAAY,CAAC,CAAC;IACnE,IAAI,CAACF,mBAAmB,GAAG,KAAK;EAClC;EAEAoB,YAAYA,CAAA;IACV,IAAI,CAAC3B,UAAU,CAACyB,IAAI,CAAC,MAAM,EAAC;MAAC,MAAM,EAAC,IAAI,CAACd;IAAe,CAAC,CAAC;IAC1D,IAAI,CAACD,iBAAiB,GAAG,KAAK;EAChC;EAEAkB,OAAOA,CAAA;IACLhB,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB,IAAI,CAACb,UAAU,CAACyB,IAAI,CAAC,SAAS,CAAC;EACjC;CACD;AAxEY3B,kBAAkB,GAAA+B,UAAA,EAL9BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAE,2BAA2B;CACzC,CAAC,C,EACWlC,kBAAkB,CAwE9B;SAxEYA,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}