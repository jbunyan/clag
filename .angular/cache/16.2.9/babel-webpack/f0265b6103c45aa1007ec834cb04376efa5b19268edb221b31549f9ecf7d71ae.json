{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nexport class ConnectionService {\n  constructor() {\n    this.myPlayerId = -1;\n    this.myConnectionId = -1;\n    this.myName = \"XXX\";\n    this.messageBehaviourSubject = new BehaviorSubject({\n      messageType: \"init\"\n    });\n    this.ws = new WebSocket(\"wss://clag-production.up.railway.app/\");\n    this.ws.onopen = function () {\n      // Web Socket is connected, send data using send()\n      console.log(\"Connection successful\");\n    };\n    this.ws.onmessage = evt => {\n      let received_msg = JSON.parse(evt.data);\n      console.log(\"Message received... \" + JSON.stringify(received_msg));\n      switch (received_msg.messageType) {\n        case \"connection\":\n          {\n            this.myConnectionId = received_msg.connectionId;\n            break;\n          }\n        case \"players\":\n          {\n            if (this.myConnectionId === received_msg.connectionId) {\n              this.myPlayerId = received_msg.data.players.findIndex(p => p === this.myName);\n            }\n            this.forward(received_msg);\n            console.log(`New player: ${received_msg.data.name}`);\n            break;\n          }\n        case \"predictionRequest\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"hand\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"predictions\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"playCard\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"cardPlayed\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"trickResult\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        case \"scoreboard\":\n          {\n            this.forward(received_msg);\n            break;\n          }\n        default:\n          {\n            console.log(\"unrecognised message type received\");\n          }\n      }\n    };\n    this.ws.onclose = () => {\n      // websocket is closed.\n      this.myConnectionId = -1;\n      alert(\"Connection is closed...\");\n    };\n  }\n  setMyName(n) {\n    this.myName = n;\n  }\n  getMyPlayerId() {\n    return this.myPlayerId;\n  }\n  getMessageBehaviourSubject() {\n    return this.messageBehaviourSubject;\n  }\n  send(messageType, data) {\n    let dataSection = data ? `,\"data\":${JSON.stringify(data)}` : \"\";\n    this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"playerId\": ${this.myPlayerId},\"messageType\":\"${messageType}\"${dataSection}}`);\n  }\n  forward(msg) {\n    this.messageBehaviourSubject.next({\n      messageType: msg.messageType,\n      data: msg.data ? msg.data : undefined\n    });\n  }\n  isConnected() {\n    return this.myConnectionId !== -1;\n  }\n  static #_ = this.ɵfac = function ConnectionService_Factory(t) {\n    return new (t || ConnectionService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConnectionService,\n    factory: ConnectionService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","ConnectionService","constructor","myPlayerId","myConnectionId","myName","messageBehaviourSubject","messageType","ws","WebSocket","onopen","console","log","onmessage","evt","received_msg","JSON","parse","data","stringify","connectionId","players","findIndex","p","forward","name","onclose","alert","setMyName","n","getMyPlayerId","getMessageBehaviourSubject","send","dataSection","msg","next","undefined","isConnected","_","_2","factory","ɵfac","providedIn"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/connection.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\n\nexport interface Message {\n  messageType: string,\n  data?: any\n}\n\ninterface ServerMessage {\n  playerId: number,\n  connectionId: number,\n  messageType: string,\n  data?: any\n}\n\n@Injectable({ providedIn: 'root' })\nexport class ConnectionService {\n\n  myPlayerId: number = -1\n  myConnectionId: number = -1\n  myName: string = \"XXX\"\n\n  messageBehaviourSubject: BehaviorSubject<Message> = new BehaviorSubject({\n    messageType: \"init\"\n  })\n\n  ws: WebSocket\n\n  constructor() {\n\n    this.ws = new WebSocket(\"wss://clag-production.up.railway.app/\");\n\t\t\t\t\n      this.ws.onopen = function() {\n        \n        // Web Socket is connected, send data using send()\n        console.log(\"Connection successful\")\n      };\n\n      this.ws.onmessage = (evt) => { \n        let received_msg = JSON.parse(evt.data) as ServerMessage;\n        console.log(\"Message received... \" + JSON.stringify(received_msg));\n\n        switch(received_msg.messageType) {\n          case \"connection\": {\n            this.myConnectionId = received_msg.connectionId\n            break\n          }\n          case \"players\": {\n            if ( this.myConnectionId === received_msg.connectionId) {\n              this.myPlayerId = received_msg.data.players.findIndex((p: string) => p === this.myName)\n            }\n            this.forward(received_msg)\n            console.log(`New player: ${received_msg.data.name}`)\n            break\n          }\n          case \"predictionRequest\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"hand\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"predictions\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"playCard\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"cardPlayed\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"trickResult\": {\n            this.forward(received_msg)\n            break\n          }\n          case \"scoreboard\": {\n            this.forward(received_msg)\n            break\n          }\n          default: {\n            console.log(\"unrecognised message type received\")\n          }\n        }\n        \n      };\n\n      this.ws.onclose = () => { \n        \n        // websocket is closed.\n        this.myConnectionId = -1\n        alert(\"Connection is closed...\"); \n      };\n  }\n\n  setMyName(n: string) {\n    this.myName = n\n  }\n\n  getMyPlayerId(): number {\n    return this.myPlayerId\n  }\n\n  getMessageBehaviourSubject(): BehaviorSubject<Message> {\n    return this.messageBehaviourSubject\n  }\n\n  send(messageType: string, data?: any) {\n    let dataSection: string = data ? `,\"data\":${JSON.stringify(data)}` : \"\"\n    this.ws.send(`{\"connectionId\": ${this.myConnectionId},\"playerId\": ${this.myPlayerId},\"messageType\":\"${messageType}\"${dataSection}}`);\n  }\n\n  forward(msg: ServerMessage) {\n    this.messageBehaviourSubject.next({\n      messageType: msg.messageType,\n      data: msg.data ? msg.data : undefined\n    })\n  }\n\n  isConnected(): boolean {\n    return this.myConnectionId !== -1\n  }\n\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}