{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../connection.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction DashboardComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Up\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Down\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r5 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", name_r5);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(name_r5);\n  }\n}\nfunction DashboardComponent_p_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r6 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(card_r6);\n  }\n}\nfunction DashboardComponent_p_11_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const prediction_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(prediction_r7);\n  }\n}\nexport class DashboardComponent {\n  constructor(connection) {\n    this.connection = connection;\n    this.names = ['John', 'Eric', 'Nancy', 'Allen', 'Gavin'];\n    this.myHand = [];\n    this.myName = \"XXX\";\n    this.predictions = [];\n    this.trick = 0;\n    this.scoreboard = [];\n    console.log(\"dashboard constructor\");\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: message => {\n        switch (message.messageType) {\n          case \"hand\":\n            {\n              this.myHand = message.data.hand;\n              break;\n            }\n          case \"predictions\":\n            {\n              this.predictions = message.data.predictions;\n              break;\n            }\n          default:\n            {\n              console.log(\"dashboard: ignoring message\");\n            }\n        }\n      }\n    });\n  }\n  playerSelected() {\n    this.connection.send(\"register\", {\n      \"name\": this.myName\n    });\n  }\n  newGame() {\n    console.log(\"New game\");\n    this.connection.send(\"newGame\");\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ConnectionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 16,\n    vars: 6,\n    consts: [[4, \"ngIf\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [3, \"ngValue\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, DashboardComponent_p_2_Template, 2, 0, \"p\", 0);\n        i0.ɵɵtemplate(3, DashboardComponent_p_3_Template, 2, 0, \"p\", 0);\n        i0.ɵɵelementStart(4, \"select\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_4_listener($event) {\n          return ctx.myName = $event;\n        })(\"change\", function DashboardComponent_Template_select_change_4_listener() {\n          return ctx.playerSelected();\n        });\n        i0.ɵɵtemplate(5, DashboardComponent_option_5_Template, 2, 2, \"option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"div\");\n        i0.ɵɵtext(7, \"My hand: \");\n        i0.ɵɵtemplate(8, DashboardComponent_p_8_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"div\");\n        i0.ɵɵtext(10, \"Predictions: \");\n        i0.ɵɵtemplate(11, DashboardComponent_p_11_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\");\n        i0.ɵɵtext(13, \"Scores:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_14_listener() {\n          return ctx.newGame();\n        });\n        i0.ɵɵtext(15, \"New Game\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.myName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.names);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.myHand);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.predictions);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","name_r5","ɵɵadvance","ɵɵtextInterpolate","card_r6","prediction_r7","DashboardComponent","constructor","connection","names","myHand","myName","predictions","trick","scoreboard","console","log","getMessageBehaviourSubject","subscribe","next","message","messageType","data","hand","playerSelected","send","newGame","_","ɵɵdirectiveInject","i1","ConnectionService","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","ɵɵtemplate","DashboardComponent_p_2_Template","DashboardComponent_p_3_Template","ɵɵlistener","DashboardComponent_Template_select_ngModelChange_4_listener","$event","DashboardComponent_Template_select_change_4_listener","DashboardComponent_option_5_Template","DashboardComponent_p_8_Template","DashboardComponent_p_11_Template","DashboardComponent_Template_button_click_14_listener","isConnected"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.ts","/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ConnectionService, Message } from '../connection.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent {\n\n  names: string[] = ['John','Eric','Nancy','Allen','Gavin']\n  myHand: number[] = []\n  myName: string = \"XXX\"\n  predictions: number[] = []\n  trick: number = 0\n  scoreboard: any[][] = []\n\n  constructor(\n    public connection: ConnectionService\n  ) {\n    console.log(\"dashboard constructor\")\n\n    this.connection.getMessageBehaviourSubject().subscribe({\n      next: (message:Message) => {\n        switch(message.messageType) {\n          case \"hand\": {\n            this.myHand = message.data.hand\n            break\n          }\n          case \"predictions\": {\n            this.predictions = message.data.predictions\n            break\n          }\n          default: {\n            console.log(\"dashboard: ignoring message\")\n          }\n        }\n      }\n    })\n  }\n\n  playerSelected() {\n    this.connection.send(\"register\",{\"name\":this.myName});\n  }\n\n  newGame() {\n    console.log(\"New game\")\n    this.connection.send(\"newGame\")\n  }\n}\n","<h1>Dashboard</h1>\n<p *ngIf=\"connection.isConnected()\">Connection: Up</p>\n<p *ngIf=\"!connection.isConnected()\">Connection: Down</p>\n<select [(ngModel)]=\"myName\" (change)=\"playerSelected()\">\n  <option *ngFor=\"let name of names\" [ngValue]=\"name\">{{name}}</option>\n</select>\n<div>My hand: <p *ngFor=\"let card of myHand\">{{card}}</p></div>\n<div>Predictions: <p *ngFor=\"let prediction of predictions\">{{prediction}}</p></div>\n<div>Scores:</div>\n<button (click)=\"newGame()\">New Game</button>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}