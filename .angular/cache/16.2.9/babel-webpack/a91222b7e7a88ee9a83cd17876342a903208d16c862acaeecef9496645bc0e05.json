{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../connection.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction DashboardComponent_p_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Up\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_p_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Connection: Down\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction DashboardComponent_option_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\", 5);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const name_r6 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngValue\", name_r6);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(name_r6);\n  }\n}\nfunction DashboardComponent_p_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const card_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(card_r7);\n  }\n}\nfunction DashboardComponent_p_15_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const prediction_r8 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(prediction_r8);\n  }\n}\nfunction DashboardComponent_div_18_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 7);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const score_r11 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate3(\"\", score_r11.prediction, \",\", score_r11.made, \",\", score_r11.score, \"\");\n  }\n}\nfunction DashboardComponent_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, DashboardComponent_div_18_div_1_Template, 2, 3, \"div\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const round_r9 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", round_r9);\n  }\n}\nexport class DashboardComponent {\n  constructor(connection) {\n    this.connection = connection;\n    this.names = ['John', 'Eric', 'Nancy', 'Allen', 'Gavin'];\n    this.title = 'default';\n    this.myPlayerId = -1;\n    this.myConnectionId = -1;\n    this.myHand = [];\n    this.myName = \"XXX\";\n    this.predictions = [];\n    this.trick = 0;\n    this.scoreboard = [];\n    console.log(\"dashboard constructor\");\n  }\n  selected() {\n    this.connection.send(\"register\", {\n      \"name\": this.myName\n    });\n  }\n  sendCard() {\n    let m = {\n      \"connectionId\": this.myConnectionId,\n      \"playerId\": this.myPlayerId,\n      \"messageType\": \"card\",\n      \"data\": {\n        \"card\": this.myHand[this.trick]\n      }\n    };\n    this.trick++;\n    this.connection.send(JSON.stringify(m));\n  }\n  newGame() {\n    console.log(\"New game\");\n    this.connection.send(JSON.stringify({\n      connectionId: this.myConnectionId,\n      playerId: this.myPlayerId,\n      messageType: \"newGame\"\n    }));\n  }\n  static #_ = this.ɵfac = function DashboardComponent_Factory(t) {\n    return new (t || DashboardComponent)(i0.ɵɵdirectiveInject(i1.ConnectionService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: DashboardComponent,\n    selectors: [[\"app-dashboard\"]],\n    decls: 21,\n    vars: 9,\n    consts: [[4, \"ngIf\"], [3, \"ngModel\", \"ngModelChange\", \"change\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [3, \"ngValue\"], [\"style\", \"display: inline-block\", 4, \"ngFor\", \"ngForOf\"], [2, \"display\", \"inline-block\"]],\n    template: function DashboardComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h1\");\n        i0.ɵɵtext(1, \"Dashboard\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(2, DashboardComponent_p_2_Template, 2, 0, \"p\", 0);\n        i0.ɵɵtemplate(3, DashboardComponent_p_3_Template, 2, 0, \"p\", 0);\n        i0.ɵɵelementStart(4, \"select\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function DashboardComponent_Template_select_ngModelChange_4_listener($event) {\n          return ctx.myName = $event;\n        })(\"change\", function DashboardComponent_Template_select_change_4_listener() {\n          return ctx.selected();\n        });\n        i0.ɵɵtemplate(5, DashboardComponent_option_5_Template, 2, 2, \"option\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"p\");\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(8, \"p\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(10, \"div\");\n        i0.ɵɵtext(11, \"My hand: \");\n        i0.ɵɵtemplate(12, DashboardComponent_p_12_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"div\");\n        i0.ɵɵtext(14, \"Predictions: \");\n        i0.ɵɵtemplate(15, DashboardComponent_p_15_Template, 2, 1, \"p\", 3);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(16, \"div\");\n        i0.ɵɵtext(17, \"Scores:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(18, DashboardComponent_div_18_Template, 2, 1, \"div\", 3);\n        i0.ɵɵelementStart(19, \"button\", 4);\n        i0.ɵɵlistener(\"click\", function DashboardComponent_Template_button_click_19_listener() {\n          return ctx.newGame();\n        });\n        i0.ɵɵtext(20, \"New Game\");\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", !ctx.connection.isConnected());\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngModel\", ctx.myName);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.names);\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"My player ID: \", ctx.myPlayerId, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"My connection ID: \", ctx.myConnectionId, \"\");\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.myHand);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.predictions);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.scoreboard);\n      }\n    },\n    dependencies: [i2.NgForOf, i2.NgIf, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.SelectControlValueAccessor, i3.NgControlStatus, i3.NgModel],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","name_r6","ɵɵadvance","ɵɵtextInterpolate","card_r7","prediction_r8","ɵɵtextInterpolate3","score_r11","prediction","made","score","ɵɵtemplate","DashboardComponent_div_18_div_1_Template","round_r9","DashboardComponent","constructor","connection","names","title","myPlayerId","myConnectionId","myHand","myName","predictions","trick","scoreboard","console","log","selected","send","sendCard","m","JSON","stringify","newGame","connectionId","playerId","messageType","_","ɵɵdirectiveInject","i1","ConnectionService","_2","selectors","decls","vars","consts","template","DashboardComponent_Template","rf","ctx","DashboardComponent_p_2_Template","DashboardComponent_p_3_Template","ɵɵlistener","DashboardComponent_Template_select_ngModelChange_4_listener","$event","DashboardComponent_Template_select_change_4_listener","DashboardComponent_option_5_Template","DashboardComponent_p_12_Template","DashboardComponent_p_15_Template","DashboardComponent_div_18_Template","DashboardComponent_Template_button_click_19_listener","isConnected","ɵɵtextInterpolate1"],"sources":["/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.ts","/Users/john/Projects/Clag/ClagClient2/src/app/dashboard/dashboard.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ConnectionService } from '../connection.service';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: [ './dashboard.component.css' ]\n})\nexport class DashboardComponent {\n  constructor(\n    public connection: ConnectionService\n  ) {\n    console.log(\"dashboard constructor\")\n  }\n\n  names: string[] = ['John','Eric','Nancy','Allen','Gavin']\n  title = 'default';\n  myPlayerId: number = -1\n  myConnectionId: number = -1\n  myHand: number[] = []\n  myName: string = \"XXX\"\n  predictions: number[] = []\n  trick: number = 0\n  scoreboard: any[][] = []\n\n  selected() {\n    this.connection.send(\"register\",{\"name\":this.myName});\n  }\n\n  sendCard() {\n\n    let m = {\n      \"connectionId\": this.myConnectionId,\n      \"playerId\": this.myPlayerId,\n      \"messageType\":\"card\",\n      \"data\":{\"card\":this.myHand[this.trick]}\n    }\n    this.trick++\n    this.connection.send(JSON.stringify(m))\n  }\n\n  newGame() {\n    console.log(\"New game\")\n    this.connection.send(JSON.stringify({\n      connectionId: this.myConnectionId,\n      playerId: this.myPlayerId,\n      messageType: \"newGame\"\n    }))\n  }\n}\n","<h1>Dashboard</h1>\n<p *ngIf=\"connection.isConnected()\">Connection: Up</p>\n<p *ngIf=\"!connection.isConnected()\">Connection: Down</p>\n<select [(ngModel)]=\"myName\" (change)=\"selected()\">\n  <option *ngFor=\"let name of names\" [ngValue]=\"name\">{{name}}</option>\n</select>\n<p>My player ID: {{myPlayerId}}</p>\n<p>My connection ID: {{myConnectionId}}</p>\n<div>My hand: <p *ngFor=\"let card of myHand\">{{card}}</p></div>\n<div>Predictions: <p *ngFor=\"let prediction of predictions\">{{prediction}}</p></div>\n<div>Scores:</div>\n<div *ngFor=\"let round of scoreboard\"><div style=\"display: inline-block\"  *ngFor=\"let score of round\">{{score.prediction}},{{score.made}},{{score.score}}</div></div>\n<button (click)=\"newGame()\">New Game</button>"],"mappings":";;;;;;ICCAA,EAAA,CAAAC,cAAA,QAAoC;IAAAD,EAAA,CAAAE,MAAA,qBAAc;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IACtDH,EAAA,CAAAC,cAAA,QAAqC;IAAAD,EAAA,CAAAE,MAAA,uBAAgB;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;;IAEvDH,EAAA,CAAAC,cAAA,gBAAoD;IAAAD,EAAA,CAAAE,MAAA,GAAQ;IAAAF,EAAA,CAAAG,YAAA,EAAS;;;;IAAlCH,EAAA,CAAAI,UAAA,YAAAC,OAAA,CAAgB;IAACL,EAAA,CAAAM,SAAA,GAAQ;IAARN,EAAA,CAAAO,iBAAA,CAAAF,OAAA,CAAQ;;;;;IAIhDL,EAAA,CAAAC,cAAA,QAA+B;IAAAD,EAAA,CAAAE,MAAA,GAAQ;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAZH,EAAA,CAAAM,SAAA,GAAQ;IAARN,EAAA,CAAAO,iBAAA,CAAAC,OAAA,CAAQ;;;;;IACnCR,EAAA,CAAAC,cAAA,QAA0C;IAAAD,EAAA,CAAAE,MAAA,GAAc;IAAAF,EAAA,CAAAG,YAAA,EAAI;;;;IAAlBH,EAAA,CAAAM,SAAA,GAAc;IAAdN,EAAA,CAAAO,iBAAA,CAAAE,aAAA,CAAc;;;;;IAEpCT,EAAA,CAAAC,cAAA,aAAgE;IAAAD,EAAA,CAAAE,MAAA,GAAmD;IAAAF,EAAA,CAAAG,YAAA,EAAM;;;;IAAzDH,EAAA,CAAAM,SAAA,GAAmD;IAAnDN,EAAA,CAAAU,kBAAA,KAAAC,SAAA,CAAAC,UAAA,OAAAD,SAAA,CAAAE,IAAA,OAAAF,SAAA,CAAAG,KAAA,KAAmD;;;;;IAAzJd,EAAA,CAAAC,cAAA,UAAsC;IAAAD,EAAA,CAAAe,UAAA,IAAAC,wCAAA,iBAAyH;IAAAhB,EAAA,CAAAG,YAAA,EAAM;;;;IAAzEH,EAAA,CAAAM,SAAA,GAAQ;IAARN,EAAA,CAAAI,UAAA,YAAAa,QAAA,CAAQ;;;ADHpG,OAAM,MAAOC,kBAAkB;EAC7BC,YACSC,UAA6B;IAA7B,KAAAA,UAAU,GAAVA,UAAU;IAKnB,KAAAC,KAAK,GAAa,CAAC,MAAM,EAAC,MAAM,EAAC,OAAO,EAAC,OAAO,EAAC,OAAO,CAAC;IACzD,KAAAC,KAAK,GAAG,SAAS;IACjB,KAAAC,UAAU,GAAW,CAAC,CAAC;IACvB,KAAAC,cAAc,GAAW,CAAC,CAAC;IAC3B,KAAAC,MAAM,GAAa,EAAE;IACrB,KAAAC,MAAM,GAAW,KAAK;IACtB,KAAAC,WAAW,GAAa,EAAE;IAC1B,KAAAC,KAAK,GAAW,CAAC;IACjB,KAAAC,UAAU,GAAY,EAAE;IAXtBC,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;EACtC;EAYAC,QAAQA,CAAA;IACN,IAAI,CAACZ,UAAU,CAACa,IAAI,CAAC,UAAU,EAAC;MAAC,MAAM,EAAC,IAAI,CAACP;IAAM,CAAC,CAAC;EACvD;EAEAQ,QAAQA,CAAA;IAEN,IAAIC,CAAC,GAAG;MACN,cAAc,EAAE,IAAI,CAACX,cAAc;MACnC,UAAU,EAAE,IAAI,CAACD,UAAU;MAC3B,aAAa,EAAC,MAAM;MACpB,MAAM,EAAC;QAAC,MAAM,EAAC,IAAI,CAACE,MAAM,CAAC,IAAI,CAACG,KAAK;MAAC;KACvC;IACD,IAAI,CAACA,KAAK,EAAE;IACZ,IAAI,CAACR,UAAU,CAACa,IAAI,CAACG,IAAI,CAACC,SAAS,CAACF,CAAC,CAAC,CAAC;EACzC;EAEAG,OAAOA,CAAA;IACLR,OAAO,CAACC,GAAG,CAAC,UAAU,CAAC;IACvB,IAAI,CAACX,UAAU,CAACa,IAAI,CAACG,IAAI,CAACC,SAAS,CAAC;MAClCE,YAAY,EAAE,IAAI,CAACf,cAAc;MACjCgB,QAAQ,EAAE,IAAI,CAACjB,UAAU;MACzBkB,WAAW,EAAE;KACd,CAAC,CAAC;EACL;EAAC,QAAAC,CAAA,G;qBAxCUxB,kBAAkB,EAAAlB,EAAA,CAAA2C,iBAAA,CAAAC,EAAA,CAAAC,iBAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlB5B,kBAAkB;IAAA6B,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCR/BrD,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,gBAAS;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAClBH,EAAA,CAAAe,UAAA,IAAAwC,+BAAA,eAAsD;QACtDvD,EAAA,CAAAe,UAAA,IAAAyC,+BAAA,eAAyD;QACzDxD,EAAA,CAAAC,cAAA,gBAAmD;QAA3CD,EAAA,CAAAyD,UAAA,2BAAAC,4DAAAC,MAAA;UAAA,OAAAL,GAAA,CAAA5B,MAAA,GAAAiC,MAAA;QAAA,EAAoB,oBAAAC,qDAAA;UAAA,OAAWN,GAAA,CAAAtB,QAAA,EAAU;QAAA,EAArB;QAC1BhC,EAAA,CAAAe,UAAA,IAAA8C,oCAAA,oBAAqE;QACvE7D,EAAA,CAAAG,YAAA,EAAS;QACTH,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,GAA4B;QAAAF,EAAA,CAAAG,YAAA,EAAI;QACnCH,EAAA,CAAAC,cAAA,QAAG;QAAAD,EAAA,CAAAE,MAAA,GAAoC;QAAAF,EAAA,CAAAG,YAAA,EAAI;QAC3CH,EAAA,CAAAC,cAAA,WAAK;QAAAD,EAAA,CAAAE,MAAA,iBAAS;QAAAF,EAAA,CAAAe,UAAA,KAAA+C,gCAAA,eAA2C;QAAA9D,EAAA,CAAAG,YAAA,EAAM;QAC/DH,EAAA,CAAAC,cAAA,WAAK;QAAAD,EAAA,CAAAE,MAAA,qBAAa;QAAAF,EAAA,CAAAe,UAAA,KAAAgD,gCAAA,eAA4D;QAAA/D,EAAA,CAAAG,YAAA,EAAM;QACpFH,EAAA,CAAAC,cAAA,WAAK;QAAAD,EAAA,CAAAE,MAAA,eAAO;QAAAF,EAAA,CAAAG,YAAA,EAAM;QAClBH,EAAA,CAAAe,UAAA,KAAAiD,kCAAA,iBAAqK;QACrKhE,EAAA,CAAAC,cAAA,iBAA4B;QAApBD,EAAA,CAAAyD,UAAA,mBAAAQ,qDAAA;UAAA,OAASX,GAAA,CAAAhB,OAAA,EAAS;QAAA,EAAC;QAACtC,EAAA,CAAAE,MAAA,gBAAQ;QAAAF,EAAA,CAAAG,YAAA,EAAS;;;QAXzCH,EAAA,CAAAM,SAAA,GAA8B;QAA9BN,EAAA,CAAAI,UAAA,SAAAkD,GAAA,CAAAlC,UAAA,CAAA8C,WAAA,GAA8B;QAC9BlE,EAAA,CAAAM,SAAA,GAA+B;QAA/BN,EAAA,CAAAI,UAAA,UAAAkD,GAAA,CAAAlC,UAAA,CAAA8C,WAAA,GAA+B;QAC3BlE,EAAA,CAAAM,SAAA,GAAoB;QAApBN,EAAA,CAAAI,UAAA,YAAAkD,GAAA,CAAA5B,MAAA,CAAoB;QACD1B,EAAA,CAAAM,SAAA,GAAQ;QAARN,EAAA,CAAAI,UAAA,YAAAkD,GAAA,CAAAjC,KAAA,CAAQ;QAEhCrB,EAAA,CAAAM,SAAA,GAA4B;QAA5BN,EAAA,CAAAmE,kBAAA,mBAAAb,GAAA,CAAA/B,UAAA,KAA4B;QAC5BvB,EAAA,CAAAM,SAAA,GAAoC;QAApCN,EAAA,CAAAmE,kBAAA,uBAAAb,GAAA,CAAA9B,cAAA,KAAoC;QACLxB,EAAA,CAAAM,SAAA,GAAS;QAATN,EAAA,CAAAI,UAAA,YAAAkD,GAAA,CAAA7B,MAAA,CAAS;QACCzB,EAAA,CAAAM,SAAA,GAAc;QAAdN,EAAA,CAAAI,UAAA,YAAAkD,GAAA,CAAA3B,WAAA,CAAc;QAEnC3B,EAAA,CAAAM,SAAA,GAAa;QAAbN,EAAA,CAAAI,UAAA,YAAAkD,GAAA,CAAAzB,UAAA,CAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}